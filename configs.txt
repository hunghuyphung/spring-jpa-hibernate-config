
- Disable log jpa:
spring.jpa.show-sql=false

- Disable Spring Open Session In View:
spring.jpa.open-in-view=false

- Allow batching queries and reorder statements so that statements of the same type are being batches:
spring.jpa.properties.hibernate.jdbc.batch_size=15
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

- Enable fail on pagination when collection fetching:
spring.jpa.properties.hibernate.query.fail_on_pagination_over_collection_fetch=true

- (Optional)Monitoring slow SQL queries executed by JPA and Hibernate:
spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=25

- Statement caching at data access framework layer(Hibernate):
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true

- (Optional)Configuring the literal handling mode:
spring.jpa.properties.hibernate.criteria.literal_handling_mode=[auto|bind|inline](default value is auto)

- Enabling rewriteBatchedInserts for Spring JPA with PostgreSQL:
spring.datasource.url=jdbc:postgresql://localhost:5432/your_database?reWriteBatchedInserts=true

- Delay database connection acquisition in the case of resource-local (a single data source):
spring.datasource.hikari.auto-commit=false
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

- Caching query plan(execution plan):
spring.jpa.properties.hibernate.query.plan_cache_max_size=4096

- The fastest way to update a table row when using Hibernate and Oracle use @RowId

- Fetching strategy should be set for relationships definition:
+ @ManyToOne(fetch = FetchType.LAZY). By default, @ManyToOne associations use the FetchType.EAGER strategy

+ @OneToOne:
    In a one-to-one (1-1) relationship in a database, the parent and child tables typically share the same key.
    So, use @MapsId(the @Id column no longer uses a @GeneratedValue annotation) to mapping id of parent table
    for the child id, and use @JoinColumn to define FK column name

    if definition of child is needed for business. When use [optional = false(parent-side) + @MapsId(child-side)]

    Ex:
    // child-side
    @Entity(name = "PostDetails")
    @Table(name = "post_details")
    public class PostDetails {
        @Id
        private Long id;

        @OneToOne(fetch = FetchType.LAZY)
        @MapsId
        @JoinColumn(name = "id")
        private Post post;
    }

    // parent-side
    @OneToOne(
        mappedBy = "post",
        cascade = CascadeType.ALL,
        fetch = FetchType.LAZY,
        optional = false
    )
    private PostDetails details;
